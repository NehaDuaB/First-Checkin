# Step 1: Define variables for tenant, client credentials, and team details
$tenantId = "Your-Tenant-ID"           # Your Azure AD Tenant ID
$clientId = "Your-Client-ID"           # Your Azure AD App's Client ID
$clientSecret = "Your-Client-Secret"   # Your Azure AD App's Client Secret
$teamName = "Your-Team-Name"           # Desired name for the new Microsoft Team
$teamDescription = "Description of your Team"  # Description for the team

# Step 2: Get an access token from Azure AD
$body = @{
    grant_type    = "client_credentials"                      # Using client credentials flow
    scope         = "https://graph.microsoft.com/.default"   # Scopes for Microsoft Graph API
    client_id     = $clientId                                # App's client ID
    client_secret = $clientSecret                            # App's client secret
}
# Request token from Azure AD
$tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token" -Method Post -Body $body
$accessToken = $tokenResponse.access_token  # Store the received access token

# Step 3: Create a new team using Microsoft Graph API
$teamBody = @{
    displayName     = $teamName           # Name of the team to be created
    description     = $teamDescription    # Description for the team
    visibility      = "Private"           # Team visibility: "Private" or "Public"
    funSettings     = @{
        allowGiphy = $true                # Allow GIFs in the team
        giphyContentRating = "strict"     # Content rating for GIFs: "strict" or "moderate"
    }
    messagingSettings = @{
        allowUserEditMessages = $true     # Allow users to edit their messages
        allowUserDeleteMessages = $true   # Allow users to delete their messages
    }
    memberSettings = @{
        allowCreateUpdateChannels = $true # Allow members to create and update channels
        allowDeleteChannels = $true       # Allow members to delete channels
    }
} | ConvertTo-Json -Compress  # Convert the team settings to JSON format

# Step 4: Send a request to Microsoft Graph API to create the team
$teamResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/teams" `
    -Headers @{Authorization = "Bearer $accessToken"} `  # Authorization header with the token
    -Method POST -Body $teamBody -ContentType "application/json"  # Send POST request with team details

$teamId = $teamResponse.id  # Capture the ID of the newly created team

# Step 5: Create a new channel within the created team
$channelBody = @{
    displayName = "General"                # Name of the new channel
    description = "This is the general channel"  # Description for the channel
} | ConvertTo-Json -Compress  # Convert channel settings to JSON format

# Step 6: Send a request to Microsoft Graph API to create the channel in the team
$channelResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/teams/$teamId/channels" `
    -Headers @{Authorization = "Bearer $accessToken"} `  # Authorization header with the token
    -Method POST -Body $channelBody -ContentType "application/json"  # Send POST request with channel details
